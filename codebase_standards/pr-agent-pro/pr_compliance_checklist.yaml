pr_compliances:
  - title: "Compliance 7: Distributed System Tracing"
    is_blocker: true
    event: "Microservices and distributed system interactions"
    success_criteria: "End-to-end request tracing with correlation of actions across multiple services and comprehensive distributed context preservation"
    failure_criteria: "Loss of request context between services or inability to track request flow"
    code_example: |
      def verify_distributed_tracing(trace_context):
          required_keys = ['trace_id', 'parent_span_id', 'service_name']
          return all(key in trace_context for key in required_keys)

      def process_distributed_request(request):
          trace_context = {
              'trace_id': generate_trace_id(),
              'parent_span_id': get_current_span_id(),
              'service_name': 'user-service'
          }
          
          try:
              if verify_distributed_tracing(trace_context):
                  logger.info("Distributed request processing", extra=trace_context)
              
              result = forward_request_to_next_service(request, trace_context)
              return result
          except Exception as e:
              logger.error("Distributed request failed", extra={
                  'trace_context': trace_context,
                  'error': str(e)
              })
              raise

  - title: "Compliance 10: Frontend Button State Synchronization"
    is_blocker: false
    event: "Interactive button state changes and visual feedback in web UI"
    success_criteria: "Button visually updates within 150ms, maintains consistent state between frontend display and backend model, and prevents double-clicks during processing"
    failure_criteria: "Button state desynchronization, visual lag exceeding 150ms, or multiple callback executions from rapid clicks"
    code_example: |
      from bokeh.models import Button, CustomJS
      from time import time
      
      def verify_button_state_sync(button, callback_log):
          button.js_on_click(CustomJS(code="this.disabled = true; this.label = 'Processing...'"))
          click_time = time()
          
          state_changes = [log for log in callback_log if log['timestamp'] - click_time < 0.15]
          double_clicks = len([log for log in callback_log if log['event'] == 'click']) > 1
          
          return (len(state_changes) > 0 and not double_clicks and 
                  button.disabled and button.label == 'Processing...')
